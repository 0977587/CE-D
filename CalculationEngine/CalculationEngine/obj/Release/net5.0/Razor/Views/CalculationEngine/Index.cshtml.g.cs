#pragma checksum "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\CalculationEngine\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "75ad2cf8736447dd3522dbd5fe91a73475b59a47"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_CalculationEngine_Index), @"mvc.1.0.view", @"/Views/CalculationEngine/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\_ViewImports.cshtml"
using CalculationEngine;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\_ViewImports.cshtml"
using CalculationEngine.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"75ad2cf8736447dd3522dbd5fe91a73475b59a47", @"/Views/CalculationEngine/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"def31402cfc0c785bace57c4254af669a5fb3df1", @"/Views/_ViewImports.cshtml")]
    public class Views_CalculationEngine_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\CalculationEngine\Index.cshtml"
  
    var calc = new Calculation()
    {
        LeftHandValue = new Calculation() { CurrentValue = 2 },
        RightHandValue = new Calculation()
        {
            LeftHandValue = new Calculation() { CurrentValue = 3 },
            RightHandValue = new Calculation() { CurrentValue = 5 },
            Function = (left, right) => left + right
        },
        Function = (left, right) => left * right
    };

    var links = Html.Raw(ViewData["Links"]);
    var nodes = Html.Raw(ViewData["Nodes"]);

#line default
#line hidden
#nullable disable
            WriteLiteral(@"

<!DOCTYPE html>
<meta charset=""utf-8"">

<script src=""https://d3js.org/d3.v6.js"" charset=""utf-8""></script>
<!-- Create a div where the graph will take place -->
<div id=""my_dataviz""></div>

<script>

    // set the dimensions and margins of the graph
    const margin = { top: 10, right: 30, bottom: 30, left: 40 },
        width = 400 - margin.left - margin.right,
        height = 400 - margin.top - margin.bottom;

    // append the svg object to the body of the page
    const svg = d3.select(""#my_dataviz"")
        .append(""svg"")
        .attr(""width"", width + margin.left + margin.right)
        .attr(""height"", height + margin.top + margin.bottom)
        .append(""g"")
        .attr(""transform"",
            `translate(${margin.left}, ${margin.top})`);

    window.onload = function () {
        var nodes = visualize(");
#nullable restore
#line 43 "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\CalculationEngine\Index.cshtml"
                         Write(links);

#line default
#line hidden
#nullable disable
            WriteLiteral(",");
#nullable restore
#line 43 "C:\Users\laure\Documents\GitHub\calculation-engine-Laurens-Maas\CalculationEngine\CalculationEngine\Views\CalculationEngine\Index.cshtml"
                                Write(nodes);

#line default
#line hidden
#nullable disable
            WriteLiteral(@");
    };

    function visualize(links, nodes) {
        // Initializ e the links

        const link = svg
            .selectAll(""line"")
            .data(links)
            .join(""line"")
            .style(""stroke"", ""#aaa"")

        // Initialize the nodes
        const node = svg
            .selectAll(""rect"")
            .data(nodes)
            .join(""rect"")
            .attr(""width"", 20)
            .attr(""height"", 20)
            .style(""fill"", ""#69b3a2"");  
            
        var label = svg.append(""g"")
            .attr(""class"", ""labels"")
            .selectAll(""text"")
            .data(nodes)
            .enter().append(""text"")
            .attr(""class"", ""label"")
            .text(function (d) { return d.name; });

            
        // Let's list the force we wanna apply on the network
        const simulation = d3.forceSimulation(nodes)                 // Force algorithm is applied to data.nodes
            .force(""link"", d3.forceLink()                        ");
            WriteLiteral(@"       // This force provides links between nodes
                .id(function (d) { return d.id; })                     // This provide  the id of a node
                .links(links)                                    // and this the list of links
            )
            .force(""charge"", d3.forceManyBody().strength(-400))         // This adds repulsion between nodes. Play with the -400 for the repulsion strength
            .force(""center"", d3.forceCenter(width / 2, height / 2))     // This force attracts nodes to the center of the svg area
            .on(""end"", ticked);

        // This function is run at each iteration of the force algorithm, updating the nodes position.
        function ticked() {
            link
                .attr(""x1"", function (d) { return d.source.x; })
                .attr(""y1"", function (d) { return d.source.y; })
                .attr(""x2"", function (d) { return d.target.x; })
                .attr(""y2"", function (d) { return d.target.y; });
            node");
            WriteLiteral(@"
                .attr(""x"", function (d) { return d.x - 3 })
                .attr(""y"", function (d) { return d.y - 6 });
            label
                .attr(""x"", function (d) { return d.x; })
                .attr(""y"", function (d) { return d.y; })
                .style(""font-size"", ""20px"").style(""fill"", ""#4393c3"");

        }
    }
       


</script>

<!--All Required REACTJS Lib-->
<script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/react/15.3.2/react-dom.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/remarkable/1.7.1/remarkable.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/prop-types/15.6.0/prop-types.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.1/jquery.min.js""></script>
<script src=""https://cdnjs.cloudflare.com/ajax/libs/jssor-slider/28.0.0/jssor.slider.min.js""></script>
");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
